#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

pub type releasehookType = ::std::option::Option<
    unsafe extern "C" fn(val: *mut ::std::os::raw::c_void, size: ::std::os::raw::c_int),
>;

pub type SQObjectType = ::std::os::raw::c_int;
pub const SQObjectType__RT_NULL: SQObjectType = 1;
pub const SQObjectType__RT_INTEGER: SQObjectType = 2;
pub const SQObjectType__RT_FLOAT: SQObjectType = 4;
pub const SQObjectType__RT_BOOL: SQObjectType = 8;
pub const SQObjectType__RT_STRING: SQObjectType = 16;
pub const SQObjectType__RT_TABLE: SQObjectType = 32;
pub const SQObjectType__RT_ARRAY: SQObjectType = 64;
pub const SQObjectType__RT_USERDATA: SQObjectType = 128;
pub const SQObjectType__RT_CLOSURE: SQObjectType = 256;
pub const SQObjectType__RT_NATIVECLOSURE: SQObjectType = 512;
pub const SQObjectType__RT_GENERATOR: SQObjectType = 1024;
pub const SQObjectType_OT_USERPOINTER: SQObjectType = 2048;
pub const SQObjectType__RT_USERPOINTER: SQObjectType = 2048;
pub const SQObjectType__RT_THREAD: SQObjectType = 4096;
pub const SQObjectType__RT_FUNCPROTO: SQObjectType = 8192;
pub const SQObjectType__RT_CLASS: SQObjectType = 16384;
pub const SQObjectType__RT_INSTANCE: SQObjectType = 32768;
pub const SQObjectType__RT_WEAKREF: SQObjectType = 65536;
pub const SQObjectType_OT_VECTOR: SQObjectType = 262144;
pub const SQObjectType_SQOBJECT_CANBEFALSE: SQObjectType = 16777216;
pub const SQObjectType_OT_NULL: SQObjectType = 16777217;
pub const SQObjectType_OT_BOOL: SQObjectType = 16777224;
pub const SQObjectType_SQOBJECT_DELEGABLE: SQObjectType = 33554432;
pub const SQObjectType_SQOBJECT_NUMERIC: SQObjectType = 67108864;
pub const SQObjectType_OT_INTEGER: SQObjectType = 83886082;
pub const SQObjectType_OT_FLOAT: SQObjectType = 83886084;
pub const SQObjectType_SQOBJECT_REF_COUNTED: SQObjectType = 134217728;
pub const SQObjectType_OT_STRING: SQObjectType = 134217744;
pub const SQObjectType_OT_ARRAY: SQObjectType = 134217792;
pub const SQObjectType_OT_CLOSURE: SQObjectType = 134217984;
pub const SQObjectType_OT_NATIVECLOSURE: SQObjectType = 134218240;
pub const SQObjectType_OT_ASSET: SQObjectType = 134218752;
pub const SQObjectType_OT_THREAD: SQObjectType = 134221824;
pub const SQObjectType_OT_FUNCPROTO: SQObjectType = 134225920;
pub const SQObjectType_OT_CLAAS: SQObjectType = 134234112;
pub const SQObjectType_OT_STRUCT: SQObjectType = 136314880;
pub const SQObjectType_OT_WEAKREF: SQObjectType = 134283264;
pub const SQObjectType_OT_TABLE: SQObjectType = 167772192;
pub const SQObjectType_OT_USERDATA: SQObjectType = 167772288;
pub const SQObjectType_OT_INSTANCE: SQObjectType = 167804928;
pub const SQObjectType_OT_ENTITY: SQObjectType = 171966464;

/* automatically generated by rust-bindgen 0.63.0 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HSquirrelVM {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CallInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SQTable {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SQString {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SQFunctionProto {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SQClosure {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SQSharedState {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StringTable {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SQStructInstance {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SQStructDef {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SQNativeClosure {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SQArray {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tableNode {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SQUserData {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SQObjectValue {
    pub asString: *mut SQString,
    pub asTable: *mut SQTable,
    pub asClosure: *mut SQClosure,
    pub asFuncProto: *mut SQFunctionProto,
    pub asStructDef: *mut SQStructDef,
    pub as64Integer: ::std::os::raw::c_longlong,
    pub asNativeClosure: *mut SQNativeClosure,
    pub asArray: *mut SQArray,
    pub asThread: *mut HSquirrelVM,
    pub asFloat: f32,
    pub asInteger: ::std::os::raw::c_int,
    pub asUserdata: *mut SQUserData,
    pub asStructInstance: *mut SQStructInstance,
}
#[test]
fn bindgen_test_layout_SQObjectValue() {
    const UNINIT: ::std::mem::MaybeUninit<SQObjectValue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SQObjectValue>(),
        8usize,
        concat!("Size of: ", stringify!(SQObjectValue))
    );
    assert_eq!(
        ::std::mem::align_of::<SQObjectValue>(),
        8usize,
        concat!("Alignment of ", stringify!(SQObjectValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asString) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SQObjectValue),
            "::",
            stringify!(asString)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asTable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SQObjectValue),
            "::",
            stringify!(asTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asClosure) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SQObjectValue),
            "::",
            stringify!(asClosure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asFuncProto) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SQObjectValue),
            "::",
            stringify!(asFuncProto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asStructDef) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SQObjectValue),
            "::",
            stringify!(asStructDef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as64Integer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SQObjectValue),
            "::",
            stringify!(as64Integer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asNativeClosure) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SQObjectValue),
            "::",
            stringify!(asNativeClosure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asArray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SQObjectValue),
            "::",
            stringify!(asArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asThread) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SQObjectValue),
            "::",
            stringify!(asThread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asFloat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SQObjectValue),
            "::",
            stringify!(asFloat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asInteger) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SQObjectValue),
            "::",
            stringify!(asInteger)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asUserdata) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SQObjectValue),
            "::",
            stringify!(asUserdata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).asStructInstance) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SQObjectValue),
            "::",
            stringify!(asStructInstance)
        )
    );
}